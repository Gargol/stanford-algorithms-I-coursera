var inversionCounter = require('../lib/count-inversions');

describe('inversion counter', function() {
  it('should return 0 inversions for an empty array', function() {
    expect(inversionCounter([])).toBe(0);
  });

  it('should return 0 for an array of one element', function() {
    expect(inversionCounter([1])).toBe(0);
  });

  it('should return 0 inversions for an array with no inversions', function() {
    expect(inversionCounter([1, 2, 3, 5, 10])).toBe(0);
  });

  it('should return 1 inversion for basic inversion', function() {
    expect(inversionCounter([2, 1])).toBe(1);
  });

  it('example from the samples should pass with 3 inversions', function() {
    expect(inversionCounter([1, 3, 5, 2, 4, 6])).toBe(3);
  });

  it('should correctly count inversions on both sides', function() {
    expect(inversionCounter([3, 2, 5, 4])).toBe(2);
  });

  it('should correctly count inversions for repeated numbers', function() {
    expect(inversionCounter([3, 3, 3, 1])).toBe(3);
  });

  it('no inversions for an array of same numbers', function() {
    expect(inversionCounter([3, 3, 3])).toBe(0);
  });

  it('should calculate correctly for given test cases', function(){
    expect(inversionCounter([9, 12, 3, 1, 6, 8, 2, 5, 14, 13, 11, 7, 10, 4, 0])).toEqual(56);
    expect(inversionCounter([1,3,5,7,9,13,11])).toEqual(1);
    expect(inversionCounter([ 37, 7, 2, 14, 35, 47, 10, 24, 44, 17, 34, 11, 16, 48, 1, 39, 6, 33, 43, 26, 40, 4, 28, 5, 38, 41, 42, 12, 13, 21, 29, 18, 3, 19, 0, 32, 46, 27, 31, 25, 15, 36, 20, 8, 9, 49, 22, 23, 30, 45 ]))
      .toEqual(590);
    expect(inversionCounter([76, 85, 59, 142, 67, 51, 133, 64, 42, 128, 9, 153, 169, 114, 193, 162, 90, 77, 14, 154, 151, 182, 18, 160, 197, 26, 143, 178, 137, 166, 1, 74, 152, 122, 185, 10, 78, 107, 84, 113, 116, 28, 175, 124, 129, 89, 30, 29, 163, 49, 40, 101, 66, 19, 80, 119, 135, 57, 38, 104, 73, 32, 146, 2, 91, 99, 190, 58, 132, 23, 194, 75, 167, 79, 123, 112, 199, 131, 60, 55, 47, 174, 17, 168, 52, 155, 109, 200, 161, 136, 195, 111, 25, 71, 145, 88, 24, 81, 186, 16, 130, 179, 68, 65, 83, 156, 53, 148, 4, 196, 33, 50, 3, 94, 34, 45, 36, 147, 35, 70, 62, 69, 191, 141, 22, 46, 183, 126, 87, 13, 159, 103, 127, 144, 8, 11, 41, 189, 198, 54, 56, 108, 176, 106, 173, 97, 21, 164, 98, 172, 171, 170, 149, 110, 138, 31, 125, 63, 82, 192, 39, 92, 95, 15, 7, 105, 187, 180, 5, 6, 44, 102, 134, 188, 181, 139, 184, 177, 12, 115, 61, 165, 37, 140, 100, 157, 20, 150, 43, 117, 120, 48, 27, 121, 86, 96, 158, 72, 118, 93]))
      .toEqual(9945);
    expect(inversionCounter([49, 105, 93, 107, 90, 125, 16, 144, 141, 48, 58, 150, 62, 47, 108, 126, 92, 35, 20, 41, 46, 70, 132, 96, 39, 13, 67, 117, 124, 136, 45, 122, 29, 6, 31, 21, 18, 28, 146, 69, 3, 44, 138, 101, 86, 5, 94, 52, 84, 76, 51, 7, 27, 99, 100, 113, 109, 110, 116, 40, 22, 50, 59, 130, 15, 66, 139, 97, 9, 34, 112, 10, 115, 37, 53, 38, 64, 121, 120, 17, 127, 56, 80, 42, 23, 55, 145, 65, 131, 2, 104, 78, 4, 123, 114, 89, 72, 71, 82, 111, 54, 85, 143, 134, 128, 63, 118, 149, 24, 43, 91, 129, 26, 87, 81, 77, 57, 25, 79, 147, 60, 102, 74, 88, 148, 61, 142, 32, 137, 11, 36, 140, 98, 106, 95, 1, 30, 135, 119, 103, 14, 33, 73, 75, 68, 12, 19, 133, 83, 8]))
      .toEqual(5524);
    expect(inversionCounter([76, 85, 59, 142, 67, 51, 133, 64, 42, 128, 9, 153, 169, 114, 193, 162, 90, 77, 14, 154, 151, 182, 18, 160, 197, 26, 143, 178, 137, 166, 1, 74, 152, 122, 185, 10, 78, 107, 84, 113, 116, 28, 175, 124, 129, 89, 30, 29, 163, 49, 40, 101, 66, 19, 80, 119, 135, 57, 38, 104, 73, 32, 146, 2, 91, 99, 190, 58, 132, 23, 194, 75, 167, 79, 123, 112, 199, 131, 60, 55, 47, 174, 17, 168, 52, 155, 109, 200, 161, 136, 195, 111, 25, 71, 145, 88, 24, 81, 186, 16, 130, 179, 68, 65, 83, 156, 53, 148, 4, 196, 33, 50, 3, 94, 34, 45, 36, 147, 35, 70, 62, 69, 191, 141, 22, 46, 183, 126, 87, 13, 159, 103, 127, 144, 8, 11, 41, 189, 198, 54, 56, 108, 176, 106, 173, 97, 21, 164, 98, 172, 171, 170, 149, 110, 138, 31, 125, 63, 82, 192, 39, 92, 95, 15, 7, 105, 187, 180, 5, 6, 44, 102, 134, 188, 181, 139, 184, 177, 12, 115, 61, 165, 37, 140, 100, 157, 20, 150, 43, 117, 120, 48, 27, 121, 86, 96, 158, 72, 118, 93]))
      .toEqual(9945);
  })

});
